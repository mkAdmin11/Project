---

- name: demo - postgresql must be started
  systemd:
    name: postgresql.service
    state: started

- name: demo - check demo db
  postgresql_info:
    db: demo
    filter:
      - databases
  register: pg_info

- name: demo - unzip demo dump
  unarchive:
    creates: /tmp/demo(.*)
    src: /share/demo.zip
    dest: /tmp/
    owner: postgres
    group: postgres
    list_files: yes
  register: unzip
  when: pg_info.databases.demo.namespaces.bookings is undefined

- name: demo - create user
  postgresql_user:
    name: "{{ db.demo.user }}"
    password: "{{ db.demo.pass }}"

- name: demo - create db
  postgresql_db:
    name: "{{ db.demo.name }}"
    owner: "{{ db.demo.user }}"
    encoding: UTF-8

- name: demo - grant privileges
  postgresql_privs:
    db: "{{ db.demo.name }}"
    privs: ALL
    type: database
    role: "{{ db.demo.user }}"

- name: demo - restore db
  postgresql_db:
    name: "{{ db.demo.name }}"
    state: restore
    target: /tmp/{{ unzip.files[0] }}
  when: pg_info.databases.demo.namespaces.bookings is undefined

- name: demo - user auth rule
  postgresql_pg_hba:
    dest: /etc/postgresql/{{ db.ver }}/main/pg_hba.conf
    contype: hostssl
    users: "{{ db.demo.user }}"
    databases: "{{ db.demo.name }}"
    source: "{{ vpn.gate }}/{{ vpn.prefix }}"
    method: cert
    options: clientcert=verify-full
  notify: handlers - reload postgresql service
